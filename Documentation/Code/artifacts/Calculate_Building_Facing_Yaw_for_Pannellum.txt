cat > /Users/forrestmiller/Desktop/fuck_claude.py << 'EOF'
import pandas as pd
import numpy as np

# Read the file
df = pd.read_csv('/Users/forrestmiller/Desktop/LL87_2019-2024.csv')

print("SMART CONSOLIDATION WITHOUT LOSING INFO...")
print(f"Starting with {len(df)} rows, {len(df.columns)} columns\n")

# Create a copy to work with
df_new = df.copy()

# 1. CONSOLIDATE AUTOMATION/CONTROL COLUMNS
print("1. Consolidating automation/control columns...")
automation_cols = [
    'Building automation system? (Y/N)',
    'Direct Digital Controls',
    'Direct Digital Controls: Heating Plant',
    'Building Automation System: Heating Plant',
    'Direct Digital Controls: Cooling Plant', 
    'Building Automation System: Cooling Plant',
    'Building Automation System: Fixture',
    'PnuematicControls',
    'No Controls',
    'No Controls: Fixture'
]

# Create master automation column - building has automation if ANY system does
df_new['Has Building Automation'] = 'no'
for col in automation_cols:
    if col in df.columns:
        # If any system has automation, mark as yes
        mask = (df[col] == 'yes') | (df[col] == 'TRUE') | (df[col] == 1) | (df[col] == '1')
        df_new.loc[mask, 'Has Building Automation'] = 'yes'

# Keep specific system automation info in simplified columns
if 'Direct Digital Controls: Heating Plant' in df.columns or 'Building Automation System: Heating Plant' in df.columns:
    df_new['Heating Automation'] = 'no'
    for col in ['Direct Digital Controls: Heating Plant', 'Building Automation System: Heating Plant']:
        if col in df.columns:
            mask = (df[col] == 'yes') | (df[col] == 'TRUE') | (df[col] == 1)
            df_new.loc[mask, 'Heating Automation'] = 'yes'

if 'Direct Digital Controls: Cooling Plant' in df.columns or 'Building Automation System: Cooling Plant' in df.columns:
    df_new['Cooling Automation'] = 'no'
    for col in ['Direct Digital Controls: Cooling Plant', 'Building Automation System: Cooling Plant']:
        if col in df.columns:
            mask = (df[col] == 'yes') | (df[col] == 'TRUE') | (df[col] == 1)
            df_new.loc[mask, 'Cooling Automation'] = 'yes'

# Drop original automation columns
df_new = df_new.drop(columns=[col for col in automation_cols if col in df_new.columns])

# 2. CONSOLIDATE EFFICIENCY COLUMNS (keep value and unit)
print("2. Consolidating efficiency columns...")
# Heating efficiency
heating_eff_cols = ['Heating System Efficiency Units', 'Efficiency Units: Heating Plant']
df_new['Heating Efficiency Value'] = np.nan
df_new['Heating Efficiency Unit'] = ''

for i, row in df.iterrows():
    for col in heating_eff_cols:
        if col in df.columns and pd.notna(row[col]):
            # Try to extract numeric value from other columns
            if 'Heating System Efficiency' in df.columns and pd.notna(df.loc[i, 'Heating System Efficiency']):
                df_new.loc[i, 'Heating Efficiency Value'] = df.loc[i, 'Heating System Efficiency']
            df_new.loc[i, 'Heating Efficiency Unit'] = row[col]
            break

# Cooling efficiency
cooling_eff_cols = ['Cooling System Efficiency units', 'Efficiency Units: Cooling Plant']
df_new['Cooling Efficiency Value'] = np.nan
df_new['Cooling Efficiency Unit'] = ''

for i, row in df.iterrows():
    for col in cooling_eff_cols:
        if col in df.columns and pd.notna(row[col]):
            df_new.loc[i, 'Cooling Efficiency Unit'] = row[col]
            break

# Drop original efficiency columns
df_new = df_new.drop(columns=[col for col in heating_eff_cols + cooling_eff_cols if col in df_new.columns])

# 3. STANDARDIZE PLANT NAMES
print("3. Standardizing plant names...")
plant_name_cols = ['Plant Name: Heating Plant', 'Plant Name: Cooling Plant', 'Plant Name: Condenser Plant']

for col in plant_name_cols:
    if col in df_new.columns:
        # Standardize common variations
        df_new[col] = df_new[col].replace({
            'Boilar': 'Boiler',
            'Boilers': 'Boiler',
            'Boiler Plant': 'Boiler',
            'Steam Boiler ': 'Steam Boiler',
            'Steam Boilers': 'Steam Boiler',
            'Steam Boiler Plant': 'Steam Boiler',
            'ConEd Steam': 'Con Edison Steam',
            'Con Ed Steam': 'Con Edison Steam',
            'Con Ed District Steam': 'Con Edison District Steam',
            'CONED': 'Con Edison Steam',
            'District Steam ': 'District Steam',
            'Utility District Steam': 'District Steam',
            'Chiller ': 'Chiller',
            'Chillers': 'Chiller',
            'Cooling Towers': 'Cooling Tower',
            'Cooling tower': 'Cooling Tower'
        })

# 4. CONSOLIDATE LINKED PLANT COLUMNS (they have the same info as plant names)
print("4. Removing redundant linked plant columns...")
linked_cols = ['Heating System Linked Heating Plant', 'Cooling System Linked Cooling Plant', 
               'Linked Condenser Cooling Plant: Cooling Plant']
df_new = df_new.drop(columns=[col for col in linked_cols if col in df_new.columns])

# 5. CONSOLIDATE FUEL TYPE 
print("5. Consolidating fuel types...")
# For buildings, check if all fuel types are the same
fuel_cols = ['Heating System Fuel Type', 'Fuel Type: Heating Plant', 'Fuel Type: Cooling Plant']
df_new['Primary Fuel Type'] = ''

for i, row in df.iterrows():
    fuels = []
    for col in fuel_cols:
        if col in df.columns and pd.notna(row[col]) and row[col] not in ['Chilled Water', 'Exported - Thermal', 'Exported - Other Metered']:
            fuels.append(row[col])
    
    if fuels:
        # Get most common fuel
        from collections import Counter
        fuel_counts = Counter(fuels)
        df_new.loc[i, 'Primary Fuel Type'] = fuel_counts.most_common(1)[0][0]

# Keep individual fuel columns but rename for clarity
if 'Fuel Type: Heating Plant' in df_new.columns:
    df_new = df_new.rename(columns={'Fuel Type: Heating Plant': 'Heating Fuel'})
if 'Fuel Type: Cooling Plant' in df_new.columns:
    df_new = df_new.rename(columns={'Fuel Type: Cooling Plant': 'Cooling Fuel'})

# Drop the generic one
if 'Heating System Fuel Type' in df_new.columns:
    df_new = df_new.drop(columns=['Heating System Fuel Type'])

# 6. DELETE 100% EMPTY COLUMNS
print("6. Removing 100% empty columns...")
empty_cols = []
for col in df_new.columns:
    if df_new[col].isna().sum() == len(df_new):
        empty_cols.append(col)

df_new = df_new.drop(columns=empty_cols)

# 7. SIMPLIFY YES/NO COLUMNS
print("7. Simplifying yes/no columns...")
yes_no_cols = ['Air Supply Tenant Spaces', 'Air Supply Corridors', 'Fan Static Pressure Reset Control',
               'Supply Air Temperature Control', 'Demand Control Ventilation', 'Not On Local BBL: Heating Plant',
               'Serves Other BBLs: Cooling Plant', 'Not On Local BBL: Cooling Plant']

for col in yes_no_cols:
    if col in df_new.columns:
        # Fill NaN with 'no' for yes/no columns
        df_new[col] = df_new[col].fillna('no')

# Final cleanup
print(f"\nRemoving {len(empty_cols)} empty columns")
print(f"Consolidated {len(automation_cols)} automation columns into 3")
print(f"Standardized plant names")
print(f"Consolidated fuel types")

print(f"\nFinal: {len(df_new)} rows, {len(df_new.columns)} columns")
print(f"Reduced from {len(df.columns)} to {len(df_new.columns)} columns")

# Save
df_new.to_csv('/Users/forrestmiller/Desktop/LL87_2019-2024.csv', index=False)
print("\nDONE. Saved to /Users/forrestmiller/Desktop/LL87_2019-2024.csv")
EOF

python3 /Users/forrestmiller/Desktop/fuck_claude.py